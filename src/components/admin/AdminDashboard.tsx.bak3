'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { getApiUrl } from '@/config/api'

interface Admin {
  id: number
  username: string
  role: string
}

interface Stats {
  totalVotes: number
  totalCandidates: number
  totalConstituencies: number
  totalDistricts: number
  totalParties: number
  activePhase: string
  blackoutActive: boolean
}

interface ElectionPhase {
  id: number
  phase_id?: number
  phase_number: number
  phase_name: string
  poll_end_datetime: string
  voting_date?: string
  result_date?: string
  is_active: boolean | number
  status?: string
  blackout_start?: string
  blackout_end?: string
  blackout_start_datetime?: string
  blackout_end_datetime?: string
}

interface Candidate {
  candidate_id: number
  name_hindi: string
  name_english: string
  party_id: number
  constituency_id: number
  photo_url?: string
  party?: {
    abbreviation: string
    name_hindi: string
  }
  constituency?: {
    name_hindi: string
  }
}

interface Party {
  id?: number
  party_id?: number
  name_hindi: string
  name_english: string
  abbreviation?: string
  short_code?: string
  symbol_url?: string
  color_code?: string
}

interface Constituency {
  id: number
  district_id: number
  seat_no: number
  name_hindi: string
  name_english: string
  district_name?: string
  district_name_english?: string
  is_reserved: number
  reservation_type?: string
  phase_id?: number
  phase_number?: number
  voting_date?: string
  result_date?: string
  phase_status?: string
}

interface District {
  id: number
  name_hindi: string
  name_english: string
}

  interface Vote {
    opinion_id: number
    candidate_id: number
    constituency_id: number
    created_at: string
    candidate?: {
      name_hindi: string
      party?: {
        abbreviation: string
      }
    }
    constituency?: {
      name_hindi: string
    }
  }export default function AdminDashboard() {
  const router = useRouter()
  const [admin, setAdmin] = useState<Admin | null>(null)
  const [stats, setStats] = useState<Stats | null>(null)
  const [phases, setPhases] = useState<ElectionPhase[]>([])
  const [candidates, setCandidates] = useState<Candidate[]>([])
  const [votes, setVotes] = useState<Vote[]>([])
  const [parties, setParties] = useState<Party[]>([])
  const [constituencies, setConstituencies] = useState<Constituency[]>([])
  const [districts, setDistricts] = useState<District[]>([])
  const [activeTab, setActiveTab] = useState('overview')
  const [loading, setLoading] = useState(true)
  const [showAddPhaseModal, setShowAddPhaseModal] = useState(false)
  const [showAddCandidateModal, setShowAddCandidateModal] = useState(false)
  const [showAddPartyModal, setShowAddPartyModal] = useState(false)
  const [showAddConstituencyModal, setShowAddConstituencyModal] = useState(false)
  const [editingPhase, setEditingPhase] = useState<ElectionPhase | null>(null)
  const [editingCandidate, setEditingCandidate] = useState<Candidate | null>(null)
  const [editingParty, setEditingParty] = useState<Party | null>(null)
  const [editingConstituency, setEditingConstituency] = useState<Constituency | null>(null)
  const [actionLoading, setActionLoading] = useState(false)
  const [phaseForm, setPhaseForm] = useState({
    phase_number: '',
    voting_date: '',
    result_date: ''
  })
  const [candidateForm, setCandidateForm] = useState({
    name_hindi: '',
    party_id: '',
    constituency_id: '',
    photo_url: ''
  })
  const [partyForm, setPartyForm] = useState({
    name_hindi: '',
    short_code: '',
    symbol_url: '',
    color_code: '#000000'
  })
  const [constituencyForm, setConstituencyForm] = useState({
    seat_no: '',
    name_hindi: '',
    name_english: '',
    district_id: '',
    phase_id: '',
    is_reserved: false,
    reservation_type: ''
  })
  const [uploadingFile, setUploadingFile] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterParty, setFilterParty] = useState('')
  const [filterConstituency, setFilterConstituency] = useState('')
  const [filterPhase, setFilterPhase] = useState('')
  const [filterDistrict, setFilterDistrict] = useState('')
  const [systemSettings, setSystemSettings] = useState({
    blackout_enforcement: true,
    duplicate_vote_prevention: true,
    anonymous_voting: true
  })

  useEffect(() => {
    // Check if admin is logged in
    const token = localStorage.getItem('adminToken')
    const adminUser = localStorage.getItem('adminUser')
    
    if (!token || !adminUser) {
      router.push('/admin')
      return
    }

    setAdmin(JSON.parse(adminUser))
    loadDashboardData(token)
  }, [router])

  const loadDashboardData = async (token: string) => {
    try {
      // Load stats
      const statsRes = await fetch(getApiUrl('/api/admin/stats', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (statsRes.ok) {
        const statsData = await statsRes.json()
        setStats(statsData)
      }

      // Load election phases
      const phasesRes = await fetch(getApiUrl('/api/admin/phases', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (phasesRes.ok) {
        const phasesData = await phasesRes.json()
        // Handle both array response and object with phases property
        setPhases(Array.isArray(phasesData) ? phasesData : phasesData.phases || [])
      }

      // Load candidates
      const candidatesRes = await fetch(getApiUrl('/api/admin/candidates', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (candidatesRes.ok) {
        const candidatesData = await candidatesRes.json()
        setCandidates(candidatesData.candidates || candidatesData || [])
      }

      // Load parties
      const partiesRes = await fetch(getApiUrl('/api/admin/parties', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (partiesRes.ok) {
        const partiesData = await partiesRes.json()
        setParties(partiesData || [])
      }

      // Load constituencies
      const constituenciesRes = await fetch(getApiUrl('/api/admin/constituencies', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (constituenciesRes.ok) {
        const constituenciesData = await constituenciesRes.json()
        setConstituencies(constituenciesData || [])
      }

      // Load districts
      const districtsRes = await fetch(getApiUrl('/api/admin/districts', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (districtsRes.ok) {
        const districtsData = await districtsRes.json()
        setDistricts(districtsData || [])
      }

      // Load recent votes
      const votesRes = await fetch(getApiUrl('/api/admin/votes/recent', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (votesRes.ok) {
        const votesData = await votesRes.json()
        setVotes(votesData.votes || votesData || [])
      }

      // Load system settings
      const settingsRes = await fetch(getApiUrl('/api/admin/settings', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (settingsRes.ok) {
        const settingsData = await settingsRes.json()
        setSystemSettings(settingsData)
      }
    } catch (error) {
      console.error('Failed to load dashboard data:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('adminToken')
    localStorage.removeItem('adminUser')
    router.push('/admin')
  }

  const togglePhase = async (phaseId: number, isActive: boolean) => {
    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/phases/${phaseId}/toggle`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ is_active: !isActive })
      })

      if (response.ok) {
        // Reload data
        await loadDashboardData(token)
        alert(isActive ? 'Phase deactivated successfully!' : 'Phase activated successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to toggle phase: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to toggle phase:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const toggleSystemSetting = async (settingKey: string, currentValue: boolean) => {
    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/settings/${settingKey}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ value: !currentValue })
      })

      if (response.ok) {
        // Update local state
        setSystemSettings(prev => ({
          ...prev,
          [settingKey]: !currentValue
        }))
        alert('Setting updated successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to update setting: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to toggle setting:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const deletePhase = async (phaseId: number) => {
    if (!confirm('Are you sure you want to delete this phase? This action cannot be undone.')) {
      return
    }

    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/phases/${phaseId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        await loadDashboardData(token)
        alert('Phase deleted successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to delete phase: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to delete phase:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const handleAddPhase = async (e: React.FormEvent) => {
    e.preventDefault()
    const token = localStorage.getItem('adminToken')
    if (!token) return

    if (!phaseForm.phase_number || !phaseForm.voting_date || !phaseForm.result_date) {
      alert('Please fill in all fields')
      return
    }

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl('/api/admin/phases', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          phase_number: parseInt(phaseForm.phase_number),
          voting_date: phaseForm.voting_date,
          result_date: phaseForm.result_date
        })
      })

      if (response.ok) {
        await loadDashboardData(token)
        setShowAddPhaseModal(false)
        setPhaseForm({ phase_number: '', voting_date: '', result_date: '' })
        alert('Phase added successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to add phase: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to add phase:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const handleEditPhase = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!editingPhase) return

    const token = localStorage.getItem('adminToken')
    if (!token) return

    if (!phaseForm.phase_number || !phaseForm.voting_date || !phaseForm.result_date) {
      alert('Please fill in all fields')
      return
    }

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/phases/${editingPhase.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          phase_number: parseInt(phaseForm.phase_number),
          voting_date: phaseForm.voting_date,
          result_date: phaseForm.result_date
        })
      })

      if (response.ok) {
        await loadDashboardData(token)
        setEditingPhase(null)
        setPhaseForm({ phase_number: '', voting_date: '', result_date: '' })
        alert('Phase updated successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to update phase: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to update phase:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const openEditPhase = (phase: ElectionPhase) => {
    setEditingPhase(phase)
    setPhaseForm({
      phase_number: phase.phase_number.toString(),
      voting_date: phase.voting_date ? phase.voting_date.split('T')[0] : '',
      result_date: phase.result_date ? phase.result_date.split('T')[0] : ''
    })
  }

  const closePhaseModal = () => {
    setShowAddPhaseModal(false)
    setEditingPhase(null)
    setPhaseForm({ phase_number: '', voting_date: '', result_date: '' })
  }

  const handleAddCandidate = async (e: React.FormEvent) => {
    e.preventDefault()
    const token = localStorage.getItem('adminToken')
    if (!token) return

    if (!candidateForm.name_hindi || !candidateForm.party_id || !candidateForm.constituency_id) {
      alert('Please fill in all required fields')
      return
    }

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl('/api/admin/candidates', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name_hindi: candidateForm.name_hindi,
          party_id: parseInt(candidateForm.party_id),
          constituency_id: parseInt(candidateForm.constituency_id),
          photo_url: candidateForm.photo_url || null
        })
      })

      if (response.ok) {
        await loadDashboardData(token)
        setShowAddCandidateModal(false)
        setCandidateForm({ name_hindi: '', party_id: '', constituency_id: '', photo_url: '' })
        alert('Candidate added successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to add candidate: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to add candidate:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const handleEditCandidate = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!editingCandidate) return

    const token = localStorage.getItem('adminToken')
    if (!token) return

    if (!candidateForm.name_hindi || !candidateForm.party_id) {
      alert('Please fill in all required fields')
      return
    }

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/candidates/${editingCandidate.candidate_id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name_hindi: candidateForm.name_hindi,
          party_id: parseInt(candidateForm.party_id),
          photo_url: candidateForm.photo_url || null
        })
      })

      if (response.ok) {
        await loadDashboardData(token)
        setEditingCandidate(null)
        setCandidateForm({ name_hindi: '', party_id: '', constituency_id: '', photo_url: '' })
        alert('Candidate updated successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to update candidate: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to update candidate:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const openEditCandidate = (candidate: Candidate) => {
    setEditingCandidate(candidate)
    setCandidateForm({
      name_hindi: candidate.name_hindi,
      party_id: candidate.party_id.toString(),
      constituency_id: candidate.constituency_id.toString(),
      photo_url: candidate.photo_url || ''
    })
  }

  const deleteCandidate = async (candidateId: number) => {
    if (!confirm('Are you sure you want to delete this candidate? This action cannot be undone.')) {
      return
    }

    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/candidates/${candidateId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        await loadDashboardData(token)
        alert('Candidate deleted successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to delete candidate: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to delete candidate:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const closeCandidateModal = () => {
    setShowAddCandidateModal(false)
    setEditingCandidate(null)
    setCandidateForm({ name_hindi: '', party_id: '', constituency_id: '', photo_url: '' })
  }

  // ==================== PARTY MANAGEMENT ====================

  const handleAddParty = () => {
    setEditingParty(null)
    setPartyForm({ name_hindi: '', short_code: '', symbol_url: '', color_code: '#000000' })
    setShowAddPartyModal(true)
  }

  const handleEditParty = (party: Party) => {
    setEditingParty(party)
    setPartyForm({
      name_hindi: party.name_hindi,
      short_code: party.abbreviation || party.short_code || '',
      symbol_url: party.symbol_url || '',
      color_code: party.color_code || '#000000'
    })
    setShowAddPartyModal(true)
  }

  const handleSubmitParty = async (e: React.FormEvent) => {
    e.preventDefault()
    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const url = editingParty 
        ? getApiUrl(`/api/admin/parties/${editingParty.id || editingParty.party_id}`
        : getApiUrl('/api/admin/parties'

      const response = await fetch(url, {
        method: editingParty ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(partyForm)
      })

      if (response.ok) {
        await loadDashboardData(token)
        closePartyModal()
        alert(editingParty ? 'Party updated successfully!' : 'Party added successfully!')
      } else {
        const error = await response.json()
        alert(`Failed: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to save party:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const deleteParty = async (partyId: number) => {
    if (!confirm('Are you sure you want to delete this party? This will affect all candidates associated with it.')) {
      return
    }

    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/parties/${partyId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        await loadDashboardData(token)
        alert('Party deleted successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to delete party: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to delete party:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const closePartyModal = () => {
    setShowAddPartyModal(false)
    setEditingParty(null)
    setPartyForm({ name_hindi: '', short_code: '', symbol_url: '', color_code: '#000000' })
  }

  // ==================== CONSTITUENCY MANAGEMENT ====================

  const handleAddConstituency = async (e: React.FormEvent) => {
    e.preventDefault()
    const token = localStorage.getItem('adminToken')
    if (!token) return

    if (!constituencyForm.seat_no || !constituencyForm.name_hindi || !constituencyForm.name_english || !constituencyForm.district_id) {
      alert('Please fill in all required fields')
      return
    }

    setActionLoading(true)
    try {
      const url = editingConstituency 
        ? getApiUrl(`/api/admin/constituencies/${editingConstituency.id}`
        : getApiUrl('/api/admin/constituencies'
      
      const response = await fetch(url, {
        method: editingConstituency ? 'PUT' : 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          seat_no: parseInt(constituencyForm.seat_no),
          name_hindi: constituencyForm.name_hindi,
          name_english: constituencyForm.name_english,
          district_id: parseInt(constituencyForm.district_id),
          phase_id: constituencyForm.phase_id ? parseInt(constituencyForm.phase_id) : null,
          is_reserved: constituencyForm.is_reserved,
          reservation_type: constituencyForm.reservation_type || null
        })
      })

      if (response.ok) {
        await loadDashboardData(token)
        closeConstituencyModal()
        alert(editingConstituency ? 'Constituency updated successfully!' : 'Constituency added successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to ${editingConstituency ? 'update' : 'add'} constituency: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to save constituency:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const openEditConstituency = (constituency: Constituency) => {
    setEditingConstituency(constituency)
    setConstituencyForm({
      seat_no: constituency.seat_no.toString(),
      name_hindi: constituency.name_hindi,
      name_english: constituency.name_english,
      district_id: constituency.district_id.toString(),
      phase_id: constituency.phase_id?.toString() || '',
      is_reserved: constituency.is_reserved === 1,
      reservation_type: constituency.reservation_type || ''
    })
    setShowAddConstituencyModal(true)
  }

  const deleteConstituency = async (constituencyId: number) => {
    if (!confirm('Are you sure you want to delete this constituency? This will affect all candidates in it.')) {
      return
    }

    const token = localStorage.getItem('adminToken')
    if (!token) return

    setActionLoading(true)
    try {
      const response = await fetch(getApiUrl(`/api/admin/constituencies/${constituencyId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        await loadDashboardData(token)
        alert('Constituency deleted successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to delete constituency: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to delete constituency:', error)
      alert('Network error. Please try again.')
    } finally {
      setActionLoading(false)
    }
  }

  const closeConstituencyModal = () => {
    setShowAddConstituencyModal(false)
    setEditingConstituency(null)
    setConstituencyForm({
      seat_no: '',
      name_hindi: '',
      name_english: '',
      district_id: '',
      phase_id: '',
      is_reserved: false,
      reservation_type: ''
    })
  }

  // ==================== FILE UPLOAD ====================

  const handleFileUpload = async (file: File, type: 'party-symbol' | 'candidate-photo') => {
    const token = localStorage.getItem('adminToken')
    if (!token) return null

    setUploadingFile(true)
    try {
      const formData = new FormData()
      formData.append(type === 'party-symbol' ? 'symbol' : 'photo', file)

      const response = await fetch(getApiUrl(`/api/upload/${type}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      })

      if (response.ok) {
        const data = await response.json()
        console.log('Upload response:', data) // Debug log
        // Return just the path, not full URL (preview will handle prepending)
        return data.url
      } else {
        const error = await response.json()
        alert(`Upload failed: ${error.error || 'Unknown error'}`)
        return null
      }
    } catch (error) {
      console.error('File upload error:', error)
      alert('Network error during upload. Please try again.')
      return null
    } finally {
      setUploadingFile(false)
    }
  }

  const handlePartySymbolUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp']
    if (!allowedTypes.includes(file.type)) {
      alert('Only image files (JPG, PNG, GIF, SVG, WEBP) are allowed!')
      return
    }

    // Validate file size (2MB)
    if (file.size > 2 * 1024 * 1024) {
      alert('File size must be less than 2MB!')
      return
    }

    const url = await handleFileUpload(file, 'party-symbol')
    if (url) {
      setPartyForm({ ...partyForm, symbol_url: url })
    }
  }

  const handleCandidatePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
    if (!allowedTypes.includes(file.type)) {
      alert('Only image files (JPG, PNG, GIF, WEBP) are allowed!')
      return
    }

    // Validate file size (5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert('File size must be less than 5MB!')
      return
    }

    const url = await handleFileUpload(file, 'candidate-photo')
    if (url) {
      setCandidateForm({ ...candidateForm, photo_url: url })
    }
  }

  // ==================== END FILE UPLOAD ====================

  // ==================== END PARTY MANAGEMENT ====================

  const clearAllVotes = async () => {
    if (!confirm('⚠️ WARNING: This will delete ALL votes. This action cannot be undone. Are you absolutely sure?')) {
      return
    }

    if (!confirm('This is your final warning. All vote data will be permanently deleted. Continue?')) {
      return
    }

    const token = localStorage.getItem('adminToken')
    if (!token) {
      alert('Session expired. Please login again.')
      return
    }

    setActionLoading(true)
    try {
      console.log('Clearing all votes...')
      const response = await fetch(getApiUrl('/api/admin/votes/clear', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      console.log('Clear votes response status:', response.status)

      if (response.ok) {
        await loadDashboardData(token)
        alert('✅ All votes cleared successfully!')
      } else {
        const error = await response.json().catch(() => ({}))
        console.error('Clear votes failed:', error)
        alert(`Failed to clear votes: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to clear votes:', error)
      alert(`Network error: ${error instanceof Error ? error.message : 'Please check if backend server is running on port 5001'}`)
    } finally {
      setActionLoading(false)
    }
  }

  const exportData = async () => {
    const token = localStorage.getItem('adminToken')
    if (!token) {
      alert('Session expired. Please login again.')
      return
    }

    setActionLoading(true)
    try {
      console.log('Exporting data...')
      const response = await fetch(getApiUrl('/api/admin/export', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      console.log('Export response status:', response.status)

      if (response.ok) {
        const data = await response.json()
        console.log('Export data received:', Object.keys(data))
        
        // Create and download file
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `bihar-poll-export-${new Date().toISOString().split('T')[0]}.json`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        window.URL.revokeObjectURL(url)
        alert('✅ Data exported successfully! Check your downloads folder.')
      } else {
        const errorData = await response.json().catch(() => ({}))
        console.error('Export failed:', errorData)
        alert(`Failed to export data: ${errorData.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Failed to export data:', error)
      alert(`Network error: ${error instanceof Error ? error.message : 'Please check if backend server is running on port 5001'}`)
    } finally {
      setActionLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg flex items-center justify-center">
                <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                </svg>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Admin Dashboard</h1>
                <p className="text-sm text-gray-500">Bihar Election Opinion Poll</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-right">
                <p className="text-sm font-medium text-gray-900">{admin?.username}</p>
                <p className="text-xs text-gray-500 capitalize">{admin?.role}</p>
              </div>
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm font-medium"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 font-medium">Total Votes</p>
                <p className="text-3xl font-bold text-gray-900 mt-2">{stats?.totalVotes || 0}</p>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 font-medium">Candidates</p>
                <p className="text-3xl font-bold text-gray-900 mt-2">{stats?.totalCandidates || 0}</p>
              </div>
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 font-medium">Constituencies</p>
                <p className="text-3xl font-bold text-gray-900 mt-2">{stats?.totalConstituencies || 0}</p>
              </div>
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 font-medium">Districts</p>
                <p className="text-3xl font-bold text-gray-900 mt-2">{stats?.totalDistricts || 0}</p>
              </div>
              <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                </svg>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          <div className="border-b border-gray-200">
            <nav className="flex -mb-px">
              <button
                onClick={() => setActiveTab('overview')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'overview'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Overview
              </button>
              <button
                onClick={() => setActiveTab('phases')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'phases'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Election Phases
              </button>
              <button
                onClick={() => setActiveTab('candidates')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'candidates'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Candidates
              </button>
              <button
                onClick={() => setActiveTab('parties')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'parties'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Parties
              </button>
              <button
                onClick={() => setActiveTab('constituencies')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'constituencies'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Constituencies
              </button>
              <button
                onClick={() => setActiveTab('votes')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'votes'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Votes
              </button>
              <button
                onClick={() => setActiveTab('settings')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'settings'
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Settings
              </button>
            </nav>
          </div>

          <div className="p-6">
            {/* Overview Tab */}
            {activeTab === 'overview' && (
              <div className="space-y-6">
                <div className="bg-gradient-to-r from-orange-50 to-blue-50 rounded-lg p-6 border border-orange-200">
                  <h3 className="text-lg font-bold text-gray-900 mb-2">Current Status</h3>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">Active Phase:</span>
                      <span className="font-semibold text-gray-900">{stats?.activePhase || 'None'}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">Blackout Period:</span>
                      <span className={`font-semibold ${stats?.blackoutActive ? 'text-red-600' : 'text-green-600'}`}>
                        {stats?.blackoutActive ? 'Active' : 'Inactive'}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-bold text-gray-900 mb-4">Quick Actions</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <button 
                      onClick={() => router.push('/results')}
                      className="p-4 bg-white border border-gray-200 rounded-lg hover:border-orange-300 hover:bg-orange-50 transition-all text-left"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">View Results</p>
                          <p className="text-sm text-gray-500">Check voting results</p>
                        </div>
                      </div>
                    </button>

                    <button 
                      onClick={() => setActiveTab('candidates')}
                      className="p-4 bg-white border border-gray-200 rounded-lg hover:border-orange-300 hover:bg-orange-50 transition-all text-left"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                          </svg>
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">Manage Candidates</p>
                          <p className="text-sm text-gray-500">View all candidates</p>
                        </div>
                      </div>
                    </button>

                    <button 
                      onClick={() => setActiveTab('phases')}
                      className="p-4 bg-white border border-gray-200 rounded-lg hover:border-orange-300 hover:bg-orange-50 transition-all text-left"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">Manage Phases</p>
                          <p className="text-sm text-gray-500">Control election phases</p>
                        </div>
                      </div>
                    </button>

                    <button 
                      onClick={clearAllVotes}
                      disabled={actionLoading}
                      className="p-4 bg-white border border-gray-200 rounded-lg hover:border-red-300 hover:bg-red-50 transition-all text-left disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">Clear Votes</p>
                          <p className="text-sm text-gray-500">Reset voting data</p>
                        </div>
                      </div>
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Election Phases Tab */}
            {activeTab === 'phases' && (
              <div className="space-y-4">
                <div className="flex justify-between items-center mb-4">
                  <div>
                    <h3 className="text-lg font-bold text-gray-900">Election Phases Management</h3>
                    <p className="text-sm text-gray-500 mt-1">Manage Bihar Assembly Election phases and blackout periods</p>
                  </div>
                  <button 
                    onClick={() => setShowAddPhaseModal(true)}
                    className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm font-medium flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    Add New Phase
                  </button>
                </div>

                {/* Info Card */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <div className="flex items-start gap-3">
                    <svg className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <div className="flex-1">
                      <p className="text-sm font-semibold text-blue-900 mb-1">ECI Compliance Information</p>
                      <ul className="text-xs text-blue-800 space-y-1">
                        <li>• Blackout period: 48 hours before poll end (automatically calculated)</li>
                        <li>• Only one phase can be active (Voting status) at a time</li>
                        <li>• Results display is blocked during blackout period</li>
                        <li>• Phase status: Upcoming → Voting → Counting → Completed</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {phases.length === 0 ? (
                  <div className="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                    <svg className="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <p className="text-gray-500 font-medium mb-2">No election phases configured yet</p>
                    <p className="text-sm text-gray-400 mb-4">Create your first election phase to get started</p>
                    <button 
                      onClick={() => setShowAddPhaseModal(true)}
                      className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm font-medium"
                    >
                      Create First Phase
                    </button>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {phases.map((phase) => (
                      <div key={phase.phase_id || phase.id} className="bg-white rounded-lg border-2 border-gray-200 hover:border-orange-200 transition-all">
                        <div className="p-4">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-2">
                                <h4 className="text-lg font-bold text-gray-900">{phase.phase_name}</h4>
                                <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                                  phase.is_active === 1
                                    ? 'bg-green-100 text-green-700 ring-2 ring-green-200'
                                    : phase.status === 'Voting'
                                    ? 'bg-blue-100 text-blue-700'
                                    : phase.status === 'Upcoming'
                                    ? 'bg-yellow-100 text-yellow-700'
                                    : phase.status === 'Completed'
                                    ? 'bg-gray-100 text-gray-600'
                                    : 'bg-gray-200 text-gray-600'
                                }`}>
                                  {phase.is_active === 1 ? '✓ Active' : phase.status || 'Inactive'}
                                </span>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                                <div className="flex items-center gap-2 text-gray-600">
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                  </svg>
                                  <span className="font-medium">Voting Date:</span>
                                  <span>{phase.voting_date ? new Date(phase.voting_date).toLocaleDateString('en-IN') : new Date(phase.poll_end_datetime).toLocaleDateString('en-IN')}</span>
                                </div>
                                
                                <div className="flex items-center gap-2 text-gray-600">
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                  </svg>
                                  <span className="font-medium">Result Date:</span>
                                  <span>{phase.result_date ? new Date(phase.result_date).toLocaleDateString('en-IN') : 'TBD'}</span>
                                </div>
                                
                                <div className="flex items-center gap-2 text-gray-600 md:col-span-2">
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                  </svg>
                                  <span className="font-medium">Constituencies:</span>
                                  <span className="font-bold text-orange-600">{(phase as any).constituency_count || 0}</span>
                                  <button
                                    onClick={() => {
                                      setActiveTab('constituencies')
                                      setFilterPhase((phase.phase_id || phase.id).toString())
                                    }}
                                    className="ml-2 text-xs text-blue-600 hover:text-blue-800 underline"
                                  >
                                    View All
                                  </button>
                                </div>
                              </div>

                              {(phase.blackout_start_datetime || phase.blackout_start) && (
                                <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                                  <div className="flex items-start gap-2">
                                    <svg className="w-4 h-4 text-red-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                    </svg>
                                    <div className="flex-1">
                                      <p className="text-xs font-semibold text-red-900 mb-1">48-Hour Blackout Period</p>
                                      <p className="text-xs text-red-700">
                                        <span className="font-medium">Start:</span> {new Date((phase.blackout_start_datetime || phase.blackout_start)!).toLocaleString('en-IN')}
                                        <br />
                                        <span className="font-medium">End:</span> {new Date((phase.blackout_end_datetime || phase.blackout_end)!).toLocaleString('en-IN')}
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>

                            <div className="flex flex-col gap-2 ml-4">
                              <button
                                onClick={() => openEditPhase(phase)}
                                disabled={actionLoading}
                                className="px-4 py-2 rounded-lg text-sm font-medium bg-blue-100 text-blue-700 hover:bg-blue-200 hover:ring-2 hover:ring-blue-200 transition-all disabled:opacity-50 disabled:cursor-not-allowed min-w-[110px]"
                              >
                                Edit
                              </button>
                              
                              <button
                                onClick={() => togglePhase(phase.phase_id || phase.id, phase.is_active === 1 || phase.status === 'Voting')}
                                disabled={actionLoading}
                                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed min-w-[110px] ${
                                  phase.is_active === 1 || phase.status === 'Voting'
                                    ? 'bg-red-100 text-red-700 hover:bg-red-200 ring-2 ring-red-200'
                                    : 'bg-green-100 text-green-700 hover:bg-green-200 hover:ring-2 hover:ring-green-200'
                                }`}
                              >
                                {actionLoading ? (
                                  <span className="flex items-center justify-center gap-2">
                                    <div className="w-3 h-3 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                                    Wait...
                                  </span>
                                ) : (
                                  phase.is_active === 1 || phase.status === 'Voting' ? 'Deactivate' : 'Activate'
                                )}
                              </button>
                              
                              {admin?.role === 'super_admin' && (
                                <button
                                  onClick={() => deletePhase(phase.phase_id || phase.id)}
                                  disabled={actionLoading}
                                  className="px-4 py-2 rounded-lg text-sm font-medium bg-red-600 text-white hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed min-w-[110px]"
                                >
                                  {actionLoading ? 'Deleting...' : 'Delete'}
                                </button>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {/* Statistics Summary */}
                {phases.length > 0 && (
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-xs font-medium text-blue-600 uppercase">Total Phases</p>
                          <p className="text-2xl font-bold text-blue-900 mt-1">{phases.length}</p>
                        </div>
                        <div className="w-10 h-10 bg-blue-200 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-blue-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4 border border-green-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-xs font-medium text-green-600 uppercase">Active</p>
                          <p className="text-2xl font-bold text-green-900 mt-1">
                            {phases.filter(p => p.is_active === 1 || p.status === 'Voting').length}
                          </p>
                        </div>
                        <div className="w-10 h-10 bg-green-200 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gradient-to-br from-yellow-50 to-yellow-100 rounded-lg p-4 border border-yellow-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-xs font-medium text-yellow-600 uppercase">Upcoming</p>
                          <p className="text-2xl font-bold text-yellow-900 mt-1">
                            {phases.filter(p => p.status === 'Upcoming').length}
                          </p>
                        </div>
                        <div className="w-10 h-10 bg-yellow-200 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-yellow-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-4 border border-gray-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-xs font-medium text-gray-600 uppercase">Completed</p>
                          <p className="text-2xl font-bold text-gray-900 mt-1">
                            {phases.filter(p => p.status === 'Completed').length}
                          </p>
                        </div>
                        <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Candidates Tab */}
            {activeTab === 'candidates' && (
              <div className="space-y-4">
                <div className="flex justify-between items-center mb-4">
                  <div>
                    <h3 className="text-lg font-bold text-gray-900">Candidate Management</h3>
                    <p className="text-sm text-gray-500 mt-1">Manage Bihar Assembly Election candidates</p>
                  </div>
                  <button 
                    onClick={() => setShowAddCandidateModal(true)}
                    className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm font-medium flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    Add New Candidate
                  </button>
                </div>

                {/* Search and Filter */}
                <div className="bg-white rounded-lg border border-gray-200 p-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Search by Name</label>
                      <input
                        type="text"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        placeholder="Search candidates..."
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Filter by Party</label>
                      <select
                        value={filterParty}
                        onChange={(e) => setFilterParty(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm"
                      >
                        <option value="">All Parties</option>
                        {parties.map(party => {
                          const partyId = (party.party_id || party.id)?.toString() || ''
                          return (
                            <option key={partyId} value={partyId}>
                              {party.abbreviation} - {party.name_hindi}
                            </option>
                          )
                        })}
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Filter by Constituency</label>
                      <select
                        value={filterConstituency}
                        onChange={(e) => setFilterConstituency(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm"
                      >
                        <option value="">All Constituencies</option>
                        {constituencies.slice(0, 50).map(constituency => (
                          <option key={constituency.id} value={constituency.id.toString()}>
                            #{constituency.seat_no} - {constituency.name_hindi}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>

                {/* Statistics */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200">
                    <p className="text-xs font-medium text-blue-600 uppercase">Total Candidates</p>
                    <p className="text-2xl font-bold text-blue-900 mt-1">{candidates.length}</p>
                  </div>
                  <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4 border border-green-200">
                    <p className="text-xs font-medium text-green-600 uppercase">Total Parties</p>
                    <p className="text-2xl font-bold text-green-900 mt-1">{parties.length}</p>
                  </div>
                  <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200">
                    <p className="text-xs font-medium text-purple-600 uppercase">Constituencies</p>
                    <p className="text-2xl font-bold text-purple-900 mt-1">{constituencies.length}</p>
                  </div>
                  <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200">
                    <p className="text-xs font-medium text-orange-600 uppercase">Filtered Results</p>
                    <p className="text-2xl font-bold text-orange-900 mt-1">
                      {candidates.filter(c => {
                        const matchesSearch = !searchTerm || 
                          c.name_hindi.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          c.name_english.toLowerCase().includes(searchTerm.toLowerCase())
                        const matchesParty = !filterParty || (c.party_id || 0).toString() === filterParty
                        const matchesConstituency = !filterConstituency || (c.constituency_id || 0).toString() === filterConstituency
                        return matchesSearch && matchesParty && matchesConstituency
                      }).length}
                    </p>
                  </div>
                </div>
                
                {candidates.length === 0 ? (
                  <div className="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                    <svg className="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <p className="text-gray-500 font-medium mb-2">No candidates found</p>
                    <p className="text-sm text-gray-400 mb-4">Add your first candidate to get started</p>
                    <button 
                      onClick={() => setShowAddCandidateModal(true)}
                      className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm font-medium"
                    >
                      Add First Candidate
                    </button>
                  </div>
                ) : (
                  <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-gray-50 border-b border-gray-200">
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">ID</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Name (Hindi)</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Name (English)</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Party</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Constituency</th>
                            <th className="px-4 py-3 text-right text-xs font-semibold text-gray-700 uppercase">Actions</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                          {candidates
                            .filter(c => {
                              const matchesSearch = !searchTerm || 
                                c.name_hindi.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                c.name_english.toLowerCase().includes(searchTerm.toLowerCase())
                              const matchesParty = !filterParty || (c.party_id || 0).toString() === filterParty
                              const matchesConstituency = !filterConstituency || (c.constituency_id || 0).toString() === filterConstituency
                              return matchesSearch && matchesParty && matchesConstituency
                            })
                            .slice(0, 100)
                            .map((candidate) => (
                            <tr key={candidate.candidate_id} className="hover:bg-gray-50 transition-colors">
                              <td className="px-4 py-3 text-sm text-gray-900 font-medium">#{candidate.candidate_id}</td>
                              <td className="px-4 py-3 text-sm font-semibold text-gray-900">{candidate.name_hindi}</td>
                              <td className="px-4 py-3 text-sm text-gray-600">{candidate.name_english}</td>
                              <td className="px-4 py-3 text-sm">
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                  {candidate.party?.abbreviation || 'IND'}
                                </span>
                              </td>
                              <td className="px-4 py-3 text-sm text-gray-600">
                                {candidate.constituency?.name_hindi || `ID: ${candidate.constituency_id}`}
                              </td>
                              <td className="px-4 py-3 text-sm text-right">
                                <div className="flex items-center justify-end gap-2">
                                  <button
                                    onClick={() => openEditCandidate(candidate)}
                                    disabled={actionLoading}
                                    className="px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 rounded-lg hover:bg-blue-200 transition-colors disabled:opacity-50"
                                  >
                                    Edit
                                  </button>
                                  {admin?.role === 'super_admin' && (
                                    <button
                                      onClick={() => deleteCandidate(candidate.candidate_id)}
                                      disabled={actionLoading}
                                      className="px-3 py-1.5 text-xs font-medium text-red-700 bg-red-100 rounded-lg hover:bg-red-200 transition-colors disabled:opacity-50"
                                    >
                                      Delete
                                    </button>
                                  )}
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    {candidates.filter(c => {
                      const matchesSearch = !searchTerm || 
                        c.name_hindi.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        c.name_english.toLowerCase().includes(searchTerm.toLowerCase())
                      const matchesParty = !filterParty || (c.party_id || 0).toString() === filterParty
                      const matchesConstituency = !filterConstituency || (c.constituency_id || 0).toString() === filterConstituency
                      return matchesSearch && matchesParty && matchesConstituency
                    }).length > 100 && (
                      <div className="text-center py-4 text-sm text-gray-500 bg-gray-50 border-t border-gray-200">
                        Showing 100 of {candidates.filter(c => {
                          const matchesSearch = !searchTerm || 
                            c.name_hindi.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            c.name_english.toLowerCase().includes(searchTerm.toLowerCase())
                          const matchesParty = !filterParty || (c.party_id || 0).toString() === filterParty
                          const matchesConstituency = !filterConstituency || (c.constituency_id || 0).toString() === filterConstituency
                          return matchesSearch && matchesParty && matchesConstituency
                        }).length} filtered candidates
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}

            {/* Parties Tab */}
            {activeTab === 'parties' && (
              <div className="space-y-4">
                <div className="flex justify-between items-center mb-6">
                  <div>
                    <h3 className="text-lg font-bold text-gray-900">Party Management</h3>
                    <p className="text-sm text-gray-500 mt-1">Manage political parties and their symbols</p>
                  </div>
                  <button
                    onClick={handleAddParty}
                    className="bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-3 rounded-lg font-medium hover:from-orange-600 hover:to-orange-700 shadow-md transition-all hover:shadow-lg flex items-center gap-2"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    Add Party
                  </button>
                </div>

                {parties.length === 0 ? (
                  <div className="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                    <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">No parties</h3>
                    <p className="mt-1 text-sm text-gray-500">Get started by adding a new party.</p>
                    <div className="mt-6">
                      <button
                        onClick={handleAddParty}
                        className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700"
                      >
                        <svg className="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                        </svg>
                        Add First Party
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {parties.map((party) => (
                      <div key={party.id || party.party_id} className="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1">
                            <h4 className="font-bold text-gray-900 text-lg hindi-text">{party.name_hindi}</h4>
                            <p className="text-sm text-gray-600 italic">{party.name_english}</p>
                            <div className="mt-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                              {party.abbreviation}
                            </div>
                          </div>
                          {party.symbol_url && (
                            <div className="w-16 h-16 flex-shrink-0 ml-3 rounded-lg overflow-hidden border-2 border-gray-200 bg-white">
                              <img 
                                src={party.symbol_url} 
                                alt={party.abbreviation}
                                className="w-full h-full object-contain p-1"
                                onError={(e) => {
                                  e.currentTarget.style.display = 'none'
                                }}
                              />
                            </div>
                          )}
                        </div>
                        
                        <div className="flex gap-2 mt-4 pt-4 border-t border-gray-100">
                          <button
                            onClick={() => handleEditParty(party)}
                            disabled={actionLoading}
                            className="flex-1 bg-blue-50 text-blue-700 px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-100 transition-colors disabled:opacity-50"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => deleteParty(party.id || party.party_id || 0)}
                            disabled={actionLoading}
                            className="flex-1 bg-red-50 text-red-700 px-3 py-2 rounded-lg text-sm font-medium hover:bg-red-100 transition-colors disabled:opacity-50"
                          >
                            Delete
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* Constituencies Tab */}
            {activeTab === 'constituencies' && (
              <div className="space-y-4">
                <div className="flex justify-between items-center mb-6">
                  <div>
                    <h3 className="text-lg font-bold text-gray-900">Constituency Management</h3>
                    <p className="text-sm text-gray-500 mt-1">Manage constituencies and assign them to election phases</p>
                  </div>
                  <button
                    onClick={() => setShowAddConstituencyModal(true)}
                    className="bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-3 rounded-lg font-medium hover:from-orange-600 hover:to-orange-700 shadow-md transition-all hover:shadow-lg flex items-center gap-2"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    Add Constituency
                  </button>
                </div>

                {/* Filters */}
                <div className="bg-white rounded-lg border border-gray-200 p-4 mb-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Filter by Phase</label>
                      <select
                        value={filterPhase}
                        onChange={(e) => setFilterPhase(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                      >
                        <option value="">All Phases</option>
                        {phases.map((phase) => (
                          <option key={phase.id || phase.phase_id} value={(phase.id || phase.phase_id || 0).toString()}>
                            Phase {phase.phase_number}
                          </option>
                        ))}
                        <option value="unassigned">Unassigned</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Filter by District</label>
                      <select
                        value={filterDistrict}
                        onChange={(e) => setFilterDistrict(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                      >
                        <option value="">All Districts</option>
                        {districts.map((district) => (
                          <option key={district.id} value={district.id.toString()}>
                            {district.name_hindi}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Search</label>
                      <input
                        type="text"
                        placeholder="Search by name or seat number..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                      />
                    </div>
                  </div>
                </div>

                {/* Summary Stats */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-blue-600 uppercase">Total</p>
                        <p className="text-2xl font-bold text-blue-900 mt-1">{constituencies.length}</p>
                      </div>
                      <div className="w-10 h-10 bg-blue-200 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-blue-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4 border border-green-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-green-600 uppercase">Phase 1</p>
                        <p className="text-2xl font-bold text-green-900 mt-1">
                          {constituencies.filter(c => c.phase_number === 1).length}
                        </p>
                      </div>
                      <div className="w-10 h-10 bg-green-200 rounded-lg flex items-center justify-center">
                        <span className="text-lg font-bold text-green-700">1</span>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-purple-600 uppercase">Phase 2</p>
                        <p className="text-2xl font-bold text-purple-900 mt-1">
                          {constituencies.filter(c => c.phase_number === 2).length}
                        </p>
                      </div>
                      <div className="w-10 h-10 bg-purple-200 rounded-lg flex items-center justify-center">
                        <span className="text-lg font-bold text-purple-700">2</span>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-orange-600 uppercase">Reserved</p>
                        <p className="text-2xl font-bold text-orange-900 mt-1">
                          {constituencies.filter(c => c.is_reserved === 1).length}
                        </p>
                      </div>
                      <div className="w-10 h-10 bg-orange-200 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-orange-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>

                {constituencies.length === 0 ? (
                  <div className="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                    <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">No constituencies</h3>
                    <p className="mt-1 text-sm text-gray-500">Get started by adding a new constituency.</p>
                    <div className="mt-6">
                      <button
                        onClick={() => setShowAddConstituencyModal(true)}
                        className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700"
                      >
                        <svg className="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                        </svg>
                        Add First Constituency
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-gray-50 border-b border-gray-200">
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Seat #</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Name (Hindi)</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Name (English)</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">District</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Phase</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Reserved</th>
                            <th className="px-4 py-3 text-right text-xs font-semibold text-gray-700 uppercase">Actions</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                          {constituencies
                            .filter(c => {
                              // Filter by phase
                              if (filterPhase === 'unassigned' && c.phase_id) return false
                              if (filterPhase && filterPhase !== 'unassigned' && c.phase_id?.toString() !== filterPhase) return false
                              
                              // Filter by district
                              if (filterDistrict && c.district_id.toString() !== filterDistrict) return false
                              
                              // Search filter
                              if (searchTerm) {
                                const search = searchTerm.toLowerCase()
                                return (
                                  c.name_hindi.toLowerCase().includes(search) ||
                                  c.name_english.toLowerCase().includes(search) ||
                                  c.seat_no.toString().includes(search)
                                )
                              }
                              
                              return true
                            })
                            .map((constituency) => (
                              <tr key={constituency.id} className="hover:bg-gray-50">
                                <td className="px-4 py-3 text-sm font-medium text-gray-900">#{constituency.seat_no}</td>
                                <td className="px-4 py-3 text-sm text-gray-900 hindi-text font-medium">{constituency.name_hindi}</td>
                                <td className="px-4 py-3 text-sm text-gray-600 italic">{constituency.name_english}</td>
                                <td className="px-4 py-3 text-sm text-gray-600">{constituency.district_name}</td>
                                <td className="px-4 py-3 text-sm">
                                  {constituency.phase_number ? (
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                      Phase {constituency.phase_number}
                                    </span>
                                  ) : (
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                                      Unassigned
                                    </span>
                                  )}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {constituency.is_reserved === 1 ? (
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                      {constituency.reservation_type}
                                    </span>
                                  ) : (
                                    <span className="text-gray-400">—</span>
                                  )}
                                </td>
                                <td className="px-4 py-3 text-sm text-right">
                                  <div className="flex justify-end gap-2">
                                    <button
                                      onClick={() => openEditConstituency(constituency)}
                                      disabled={actionLoading}
                                      className="text-blue-600 hover:text-blue-800 font-medium disabled:opacity-50"
                                    >
                                      Edit
                                    </button>
                                    <button
                                      onClick={() => deleteConstituency(constituency.id)}
                                      disabled={actionLoading}
                                      className="text-red-600 hover:text-red-800 font-medium disabled:opacity-50"
                                    >
                                      Delete
                                    </button>
                                  </div>
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Votes Tab */}
            {activeTab === 'votes' && (
              <div className="space-y-4">
                <div className="flex justify-between items-center mb-4">
                  <div>
                    <h3 className="text-lg font-bold text-gray-900">Vote Management</h3>
                    <p className="text-sm text-gray-500 mt-1">Monitor and manage opinion poll votes</p>
                  </div>
                </div>

                {/* Statistics Dashboard */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-blue-600 uppercase">Total Votes</p>
                        <p className="text-2xl font-bold text-blue-900 mt-1">{stats?.totalVotes || 0}</p>
                      </div>
                      <div className="w-10 h-10 bg-blue-200 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-blue-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                      </div>
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4 border border-green-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-green-600 uppercase">Recent (Last 50)</p>
                        <p className="text-2xl font-bold text-green-900 mt-1">{votes.length}</p>
                      </div>
                      <div className="w-10 h-10 bg-green-200 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-purple-600 uppercase">Active Phase</p>
                        <p className="text-sm font-bold text-purple-900 mt-1">{stats?.activePhase || 'None'}</p>
                      </div>
                      <div className="w-10 h-10 bg-purple-200 rounded-lg flex items-center justify-center">
                        <svg className="w-5 h-5 text-purple-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </div>
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-orange-600 uppercase">Blackout Status</p>
                        <p className="text-sm font-bold text-orange-900 mt-1">
                          {stats?.blackoutActive ? '🔒 Active' : '✓ Inactive'}
                        </p>
                      </div>
                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                        stats?.blackoutActive ? 'bg-red-200' : 'bg-green-200'
                      }`}>
                        <svg className={`w-5 h-5 ${stats?.blackoutActive ? 'text-red-700' : 'text-green-700'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          {stats?.blackoutActive ? (
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                          ) : (
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          )}
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Info Card */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-start gap-3">
                    <svg className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <div className="flex-1">
                      <p className="text-sm font-semibold text-blue-900 mb-1">Vote Monitoring Information</p>
                      <ul className="text-xs text-blue-800 space-y-1">
                        <li>• Recent votes are updated in real-time (last 50 votes shown)</li>
                        <li>• Each vote is linked to a candidate and constituency</li>
                        <li>• Duplicate prevention ensures one vote per device</li>
                        <li>• All votes are anonymous and cannot be traced back to voters</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {votes.length === 0 ? (
                  <div className="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                    <svg className="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                    </svg>
                    <p className="text-gray-500 font-medium mb-2">No votes recorded yet</p>
                    <p className="text-sm text-gray-400">Votes will appear here as voters submit their opinions</p>
                  </div>
                ) : (
                  <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                    <div className="px-4 py-3 bg-gray-50 border-b border-gray-200">
                      <h4 className="text-sm font-semibold text-gray-900">Recent Votes (Last 50)</h4>
                    </div>
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-gray-50 border-b border-gray-200">
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Vote ID</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Candidate</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Party</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Constituency</th>
                            <th className="px-4 py-3 text-left text-xs font-semibold text-gray-700 uppercase">Timestamp</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                          {votes.map((vote) => (
                            <tr key={vote.opinion_id} className="hover:bg-gray-50 transition-colors">
                              <td className="px-4 py-3 text-sm text-gray-900 font-medium">#{vote.opinion_id}</td>
                              <td className="px-4 py-3 text-sm font-semibold text-gray-900">
                                {vote.candidate?.name_hindi || `ID: ${vote.candidate_id}`}
                              </td>
                              <td className="px-4 py-3 text-sm">
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                  {vote.candidate?.party?.abbreviation || 'N/A'}
                                </span>
                              </td>
                              <td className="px-4 py-3 text-sm text-gray-600">
                                {vote.constituency?.name_hindi || `ID: ${vote.constituency_id}`}
                              </td>
                              <td className="px-4 py-3 text-sm text-gray-600">
                                {new Date(vote.created_at).toLocaleString('en-IN', {
                                  day: '2-digit',
                                  month: 'short',
                                  year: 'numeric',
                                  hour: '2-digit',
                                  minute: '2-digit'
                                })}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    <div className="px-4 py-3 bg-gray-50 border-t border-gray-200">
                      <p className="text-xs text-gray-600">
                        Showing {votes.length} most recent votes out of {stats?.totalVotes || 0} total votes
                      </p>
                    </div>
                  </div>
                )}

                {/* Danger Zone */}
                {admin?.role === 'super_admin' && (
                  <div className="bg-red-50 border-2 border-red-200 rounded-lg p-6 mt-6">
                    <div className="flex items-start gap-3 mb-4">
                      <div className="w-10 h-10 bg-red-200 rounded-lg flex items-center justify-center flex-shrink-0">
                        <svg className="w-5 h-5 text-red-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                      </div>
                      <div className="flex-1">
                        <h4 className="text-lg font-bold text-red-900 mb-1">⚠️ Danger Zone</h4>
                        <p className="text-sm text-red-800 mb-4">
                          The following actions are irreversible and should only be used for system maintenance or testing purposes.
                        </p>
                        <button
                          onClick={clearAllVotes}
                          disabled={actionLoading}
                          className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium text-sm disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                          {actionLoading ? 'Processing...' : 'Clear All Votes'}
                        </button>
                        <p className="text-xs text-red-700 mt-2">
                          ⚠️ This will permanently delete all {stats?.totalVotes || 0} votes from the database. This action cannot be undone!
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Settings Tab */}
            {activeTab === 'settings' && (
              <div className="space-y-6">
                <div className="flex justify-between items-center mb-4">
                  <div>
                    <h3 className="text-lg font-bold text-gray-900">System Settings</h3>
                    <p className="text-sm text-gray-500 mt-1">Configure system-wide settings and preferences</p>
                  </div>
                </div>

                {/* Admin Information Card */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-lg p-6">
                  <div className="flex items-start gap-4">
                    <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <div className="flex-1">
                      <h4 className="text-lg font-bold text-blue-900 mb-2">Admin Profile</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <p className="text-xs text-blue-600 font-semibold uppercase mb-1">Username</p>
                          <p className="text-sm font-bold text-blue-900">{admin?.username}</p>
                        </div>
                        <div>
                          <p className="text-xs text-blue-600 font-semibold uppercase mb-1">Role</p>
                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-bold ${
                            admin?.role === 'super_admin' 
                              ? 'bg-purple-100 text-purple-800' 
                              : 'bg-blue-100 text-blue-800'
                          }`}>
                            {admin?.role === 'super_admin' ? '👑 Super Admin' : '👤 Admin'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* ECI Compliance Settings */}
                <div className="bg-white rounded-lg border-2 border-gray-200 overflow-hidden">
                  <div className="bg-gradient-to-r from-orange-500 to-green-500 px-6 py-4">
                    <h4 className="text-lg font-bold text-white flex items-center gap-2">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                      </svg>
                      ECI Compliance Settings
                    </h4>
                    <p className="text-xs text-white opacity-90 mt-1">Electoral Commission of India mandated features</p>
                  </div>
                  <div className="p-6 space-y-4">
                    <div className="flex items-start justify-between gap-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h5 className="text-sm font-bold text-gray-900">48-Hour Blackout Period</h5>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-bold ${
                            systemSettings.blackout_enforcement
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {systemSettings.blackout_enforcement ? '✓ Inactive' : '✗ Disabled'}
                          </span>
                        </div>
                        <p className="text-xs text-gray-600 leading-relaxed">
                          Automatically enforced for all phases. Opinion polling is prohibited 48 hours before voting begins, 
                          as per ECI guidelines. System automatically blocks voting during this period.
                        </p>
                      </div>
                      <button
                        onClick={() => toggleSystemSetting('blackout_enforcement', systemSettings.blackout_enforcement)}
                        disabled={actionLoading}
                        className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${
                          systemSettings.blackout_enforcement ? 'bg-green-500' : 'bg-gray-300'
                        } ${actionLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      >
                        <span className={`inline-block h-6 w-6 transform rounded-full bg-white shadow-lg transition-transform ${
                          systemSettings.blackout_enforcement ? 'translate-x-7' : 'translate-x-1'
                        }`} />
                      </button>
                    </div>

                    <div className="flex items-start justify-between gap-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h5 className="text-sm font-bold text-gray-900">Duplicate Vote Prevention</h5>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-bold ${
                            systemSettings.duplicate_vote_prevention
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {systemSettings.duplicate_vote_prevention ? '✓ Enabled' : '✗ Disabled'}
                          </span>
                        </div>
                        <p className="text-xs text-gray-600 leading-relaxed">
                          Device fingerprinting technology ensures one vote per device. Uses browser fingerprint, 
                          IP tracking, and cookie-based verification to prevent duplicate submissions.
                        </p>
                      </div>
                      <button
                        onClick={() => toggleSystemSetting('duplicate_vote_prevention', systemSettings.duplicate_vote_prevention)}
                        disabled={actionLoading}
                        className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${
                          systemSettings.duplicate_vote_prevention ? 'bg-green-500' : 'bg-gray-300'
                        } ${actionLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      >
                        <span className={`inline-block h-6 w-6 transform rounded-full bg-white shadow-lg transition-transform ${
                          systemSettings.duplicate_vote_prevention ? 'translate-x-7' : 'translate-x-1'
                        }`} />
                      </button>
                    </div>

                    <div className="flex items-start justify-between gap-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h5 className="text-sm font-bold text-gray-900">Anonymous Voting</h5>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-bold ${
                            systemSettings.anonymous_voting
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {systemSettings.anonymous_voting ? '✓ Enabled' : '✗ Disabled'}
                          </span>
                        </div>
                        <p className="text-xs text-gray-600 leading-relaxed">
                          All votes are completely anonymous. No personal information or identifiable data is stored. 
                          Only aggregate statistics are maintained for analysis.
                        </p>
                      </div>
                      <button
                        onClick={() => toggleSystemSetting('anonymous_voting', systemSettings.anonymous_voting)}
                        disabled={actionLoading}
                        className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${
                          systemSettings.anonymous_voting ? 'bg-green-500' : 'bg-gray-300'
                        } ${actionLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      >
                        <span className={`inline-block h-6 w-6 transform rounded-full bg-white shadow-lg transition-transform ${
                          systemSettings.anonymous_voting ? 'translate-x-7' : 'translate-x-1'
                        }`} />
                      </button>
                    </div>
                  </div>
                </div>

                {/* System Statistics */}
                <div className="bg-white rounded-lg border-2 border-gray-200 overflow-hidden">
                  <div className="bg-gradient-to-r from-purple-600 to-indigo-600 px-6 py-4">
                    <h4 className="text-lg font-bold text-white flex items-center gap-2">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                      System Statistics
                    </h4>
                    <p className="text-xs text-white opacity-90 mt-1">Current system data overview</p>
                  </div>
                  <div className="p-6">
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
                        <p className="text-2xl font-bold text-blue-900">{stats?.totalVotes || 0}</p>
                        <p className="text-xs text-blue-600 font-medium mt-1">Total Votes</p>
                      </div>
                      <div className="text-center p-4 bg-green-50 rounded-lg border border-green-200">
                        <p className="text-2xl font-bold text-green-900">{stats?.totalCandidates || 0}</p>
                        <p className="text-xs text-green-600 font-medium mt-1">Candidates</p>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg border border-purple-200">
                        <p className="text-2xl font-bold text-purple-900">{stats?.totalConstituencies || 0}</p>
                        <p className="text-xs text-purple-600 font-medium mt-1">Constituencies</p>
                      </div>
                      <div className="text-center p-4 bg-orange-50 rounded-lg border border-orange-200">
                        <p className="text-2xl font-bold text-orange-900">{stats?.totalParties || 0}</p>
                        <p className="text-xs text-orange-600 font-medium mt-1">Parties</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Database Management */}
                <div className="bg-white rounded-lg border-2 border-gray-200 overflow-hidden">
                  <div className="bg-gradient-to-r from-cyan-600 to-blue-600 px-6 py-4">
                    <h4 className="text-lg font-bold text-white flex items-center gap-2">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
                      </svg>
                      Database Management
                    </h4>
                    <p className="text-xs text-white opacity-90 mt-1">Backup, export, and maintenance operations</p>
                  </div>
                  <div className="p-6 space-y-3">
                    <button 
                      onClick={exportData}
                      disabled={actionLoading}
                      className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all text-sm font-semibold disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 shadow-md hover:shadow-lg"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      {actionLoading ? 'Exporting...' : 'Export All Data (JSON)'}
                    </button>
                    <button 
                      onClick={() => alert('Backup feature will be available in next update')}
                      className="w-full px-4 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-all text-sm font-semibold flex items-center justify-center gap-2 shadow-md hover:shadow-lg"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                      </svg>
                      Create Database Backup
                    </button>
                    <div className="pt-3 border-t border-gray-200">
                      <p className="text-xs text-gray-600 mb-2 font-medium">📊 Export includes:</p>
                      <ul className="text-xs text-gray-600 space-y-1 ml-4">
                        <li>• All election phases and configurations</li>
                        <li>• Complete candidate information</li>
                        <li>• Vote statistics (aggregate only)</li>
                        <li>• Constituency and party data</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* Security & Audit */}
                <div className="bg-white rounded-lg border-2 border-gray-200 overflow-hidden">
                  <div className="bg-gradient-to-r from-indigo-600 to-purple-600 px-6 py-4">
                    <h4 className="text-lg font-bold text-white flex items-center gap-2">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                      Security & Audit Log
                    </h4>
                    <p className="text-xs text-white opacity-90 mt-1">System security status and activity</p>
                  </div>
                  <div className="p-6 space-y-3">
                    <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-green-200 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        </div>
                        <div>
                          <p className="text-sm font-semibold text-gray-900">Database Connection</p>
                          <p className="text-xs text-gray-600">Active & Healthy</p>
                        </div>
                      </div>
                      <span className="text-xs font-bold text-green-700">✓ OK</span>
                    </div>
                    <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-green-200 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        </div>
                        <div>
                          <p className="text-sm font-semibold text-gray-900">API Status</p>
                          <p className="text-xs text-gray-600">All endpoints operational</p>
                        </div>
                      </div>
                      <span className="text-xs font-bold text-green-700">✓ OK</span>
                    </div>
                    <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-green-200 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                          </svg>
                        </div>
                        <div>
                          <p className="text-sm font-semibold text-gray-900">Security Features</p>
                          <p className="text-xs text-gray-600">All protections active</p>
                        </div>
                      </div>
                      <span className="text-xs font-bold text-green-700">✓ OK</span>
                    </div>
                  </div>
                </div>

                {/* Important Notice */}
                <div className="bg-gradient-to-br from-orange-50 to-yellow-50 border-2 border-orange-300 rounded-lg p-6">
                  <div className="flex items-start gap-4">
                    <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center flex-shrink-0">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div className="flex-1">
                      <h5 className="text-sm font-bold text-orange-900 mb-2">⚠️ Important Information</h5>
                      <ul className="text-xs text-orange-800 space-y-1.5 leading-relaxed">
                        <li>• <strong>Backup Regularly:</strong> Export data frequently to prevent data loss</li>
                        <li>• <strong>ECI Compliance:</strong> All settings are configured per ECI guidelines</li>
                        <li>• <strong>Data Privacy:</strong> No personal voter information is stored</li>
                        <li>• <strong>System Health:</strong> Monitor statistics and security status regularly</li>
                        <li>• <strong>Phase Management:</strong> Configure blackout periods in the Phases tab</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Add/Edit Phase Modal */}
      {(showAddPhaseModal || editingPhase) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-gray-900">
                {editingPhase ? 'Edit Election Phase' : 'Add New Election Phase'}
              </h3>
              <button
                onClick={closePhaseModal}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <form onSubmit={editingPhase ? handleEditPhase : handleAddPhase} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Phase Number <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  min="1"
                  max="7"
                  value={phaseForm.phase_number}
                  onChange={(e) => setPhaseForm({ ...phaseForm, phase_number: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  placeholder="Enter phase number (1-7)"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">Bihar elections typically have 7 phases</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Voting Date <span className="text-red-500">*</span>
                </label>
                <input
                  type="date"
                  value={phaseForm.voting_date}
                  onChange={(e) => setPhaseForm({ ...phaseForm, voting_date: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">When voting will take place</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Result Date <span className="text-red-500">*</span>
                </label>
                <input
                  type="date"
                  value={phaseForm.result_date}
                  onChange={(e) => setPhaseForm({ ...phaseForm, result_date: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">When results will be declared</p>
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <div className="flex items-start gap-2">
                  <svg className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <div className="flex-1">
                    <p className="text-xs font-semibold text-yellow-900 mb-1">ECI Compliance</p>
                    <p className="text-xs text-yellow-800">
                      The system will automatically calculate a 48-hour blackout period ending at the result date. 
                      Results will be hidden during this period as per ECI guidelines.
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  type="button"
                  onClick={closePhaseModal}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium"
                  disabled={actionLoading}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={actionLoading}
                >
                  {actionLoading ? (
                    <span className="flex items-center justify-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      {editingPhase ? 'Updating...' : 'Adding...'}
                    </span>
                  ) : (
                    editingPhase ? 'Update Phase' : 'Add Phase'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add/Edit Candidate Modal */}
      {(showAddCandidateModal || editingCandidate) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-gray-900">
                {editingCandidate ? 'Edit Candidate' : 'Add New Candidate'}
              </h3>
              <button
                onClick={closeCandidateModal}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <form onSubmit={editingCandidate ? handleEditCandidate : handleAddCandidate} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Candidate Name (Hindi) <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={candidateForm.name_hindi}
                  onChange={(e) => setCandidateForm({ ...candidateForm, name_hindi: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent hindi-text"
                  placeholder="उम्मीदवार का नाम हिंदी में"
                  required
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Party <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={candidateForm.party_id}
                    onChange={(e) => setCandidateForm({ ...candidateForm, party_id: e.target.value })}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                    required
                  >
                    <option value="">Select Party</option>
                    {parties.map(party => (
                      <option key={party.id || party.party_id} value={party.id || party.party_id}>
                        {party.abbreviation || party.short_code} - {party.name_hindi}
                      </option>
                    ))}
                  </select>
                  <p className="text-xs text-gray-500 mt-1">Choose political party</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Constituency <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={candidateForm.constituency_id}
                    onChange={(e) => setCandidateForm({ ...candidateForm, constituency_id: e.target.value })}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                    required
                    disabled={!!editingCandidate}
                  >
                    <option value="">Select Constituency</option>
                    {constituencies.map(constituency => (
                      <option key={constituency.id} value={constituency.id}>
                        #{constituency.seat_no} - {constituency.name_hindi}
                      </option>
                    ))}
                  </select>
                  <p className="text-xs text-gray-500 mt-1">
                    {editingCandidate ? 'Cannot change constituency' : 'Choose constituency'}
                  </p>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Candidate Photo (Optional)
                </label>
                
                {/* File Upload Button */}
                <div className="mb-3">
                  <label className="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg cursor-pointer hover:from-blue-600 hover:to-blue-700 transition-all shadow-md hover:shadow-lg disabled:opacity-50">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {uploadingFile ? 'Uploading...' : 'Upload Photo to Server'}
                    <input
                      type="file"
                      accept="image/jpeg,image/jpg,image/png,image/gif,image/webp"
                      onChange={handleCandidatePhotoUpload}
                      disabled={uploadingFile}
                      className="hidden"
                    />
                  </label>
                  <p className="text-xs text-gray-600 mt-1 text-center">
                    Max 5MB • JPG, PNG, GIF, WEBP
                  </p>
                </div>
                
                {candidateForm.photo_url && (
                  <div className="mt-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <p className="text-xs font-medium text-gray-700 mb-2">Preview:</p>
                    <img 
                      src={candidateForm.photo_url.startsWith('http') ? candidateForm.photo_url : `http://localhost:5001${candidateForm.photo_url}`}
                      alt="Photo preview" 
                      className="w-24 h-32 object-cover border border-gray-300 rounded-lg"
                      onError={(e) => {
                        e.currentTarget.style.display = 'none'
                      }}
                    />
                  </div>
                )}
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <div className="flex items-start gap-2">
                  <svg className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <div className="flex-1">
                    <p className="text-xs font-semibold text-blue-900 mb-1">Candidate Information</p>
                    <ul className="text-xs text-blue-800 space-y-1">
                      <li>• Name must be entered in Hindi</li>
                      <li>• Each candidate can contest from only one constituency</li>
                      <li>• Party affiliation is required (use IND for independents)</li>
                      <li>• Photo URL is optional but recommended for better visibility</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  type="button"
                  onClick={closeCandidateModal}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium"
                  disabled={actionLoading}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={actionLoading}
                >
                  {actionLoading ? (
                    <span className="flex items-center justify-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      {editingCandidate ? 'Updating...' : 'Adding...'}
                    </span>
                  ) : (
                    editingCandidate ? 'Update Candidate' : 'Add Candidate'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add/Edit Party Modal */}
      {showAddPartyModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-4 flex justify-between items-center rounded-t-xl">
              <h3 className="text-xl font-bold">
                {editingParty ? 'Edit Party' : 'Add New Party'}
              </h3>
              <button
                onClick={closePartyModal}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <form onSubmit={handleSubmitParty} className="p-6 space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Party Name (Hindi) <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  required
                  value={partyForm.name_hindi}
                  onChange={(e) => setPartyForm({ ...partyForm, name_hindi: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 hindi-text"
                  placeholder="पार्टी का नाम (हिंदी में)"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Short Code / Abbreviation <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  required
                  value={partyForm.short_code}
                  onChange={(e) => setPartyForm({ ...partyForm, short_code: e.target.value.toUpperCase() })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 uppercase"
                  placeholder="BJP, INC, JDU, RJD, etc."
                  maxLength={10}
                />
                <p className="text-xs text-gray-500 mt-1">Short code for the party (e.g., BJP, INC)</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Party Symbol
                </label>
                
                {/* File Upload Button */}
                <div className="mb-3">
                  <label className="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg cursor-pointer hover:from-green-600 hover:to-green-700 transition-all shadow-md hover:shadow-lg disabled:opacity-50">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    {uploadingFile ? 'Uploading...' : 'Upload Symbol to Server'}
                    <input
                      type="file"
                      accept="image/jpeg,image/jpg,image/png,image/gif,image/svg+xml,image/webp"
                      onChange={handlePartySymbolUpload}
                      disabled={uploadingFile}
                      className="hidden"
                    />
                  </label>
                  <p className="text-xs text-gray-600 mt-1 text-center">
                    Max 2MB • JPG, PNG, GIF, SVG, WEBP
                  </p>
                </div>
                
                <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <p className="text-xs font-semibold text-blue-900 mb-2">💡 Tips:</p>
                  <ul className="text-xs text-blue-800 space-y-1">
                    <li>• Recommended size: 200x200px, transparent background</li>
                    <li>• For Independents: Use generic "IND" symbol</li>
                    <li>• Supports: PNG, JPG, SVG, GIF, WEBP</li>
                  </ul>
                </div>
                
                {partyForm.symbol_url && (
                  <div className="mt-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <p className="text-xs font-medium text-gray-700 mb-2">Preview:</p>
                    <div className="text-xs text-gray-600 mb-2 break-all">
                      Path: {partyForm.symbol_url}
                    </div>
                    <img 
                      src={partyForm.symbol_url}
                      alt="Symbol preview" 
                      className="w-20 h-20 object-contain border border-gray-300 rounded-lg bg-white p-2"
                      onError={(e) => {
                        console.error('Image failed to load:', partyForm.symbol_url)
                        e.currentTarget.style.display = 'none'
                      }}
                      onLoad={() => console.log('Image loaded successfully:', partyForm.symbol_url)}
                    />
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Party Color
                </label>
                <div className="flex gap-3 items-center">
                  <input
                    type="color"
                    value={partyForm.color_code}
                    onChange={(e) => setPartyForm({ ...partyForm, color_code: e.target.value })}
                    className="h-10 w-20 rounded border border-gray-300 cursor-pointer"
                  />
                  <input
                    type="text"
                    value={partyForm.color_code}
                    onChange={(e) => setPartyForm({ ...partyForm, color_code: e.target.value })}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 font-mono"
                    placeholder="#000000"
                    pattern="^#[0-9A-Fa-f]{6}$"
                  />
                </div>
                <p className="text-xs text-gray-500 mt-1">Theme color for the party</p>
              </div>

              <div className="flex gap-3 pt-4 border-t border-gray-200">
                <button
                  type="button"
                  onClick={closePartyModal}
                  disabled={actionLoading}
                  className="flex-1 px-6 py-3 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={actionLoading}
                  className="flex-1 bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-3 rounded-lg font-medium hover:from-orange-600 hover:to-orange-700 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
                >
                  {actionLoading ? (
                    <span className="flex items-center justify-center gap-2">
                      <svg className="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Saving...
                    </span>
                  ) : (
                    editingParty ? 'Update Party' : 'Add Party'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add/Edit Constituency Modal */}
      {showAddConstituencyModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-4 flex justify-between items-center rounded-t-xl">
              <h3 className="text-xl font-bold">
                {editingConstituency ? 'Edit Constituency' : 'Add New Constituency'}
              </h3>
              <button
                onClick={closeConstituencyModal}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <form onSubmit={handleAddConstituency} className="p-6 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Seat Number <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    required
                    min="1"
                    value={constituencyForm.seat_no}
                    onChange={(e) => setConstituencyForm({ ...constituencyForm, seat_no: e.target.value })}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="1"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    District <span className="text-red-500">*</span>
                  </label>
                  <select
                    required
                    value={constituencyForm.district_id}
                    onChange={(e) => setConstituencyForm({ ...constituencyForm, district_id: e.target.value })}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  >
                    <option value="">Select District</option>
                    {districts.map((district) => (
                      <option key={district.id} value={district.id}>
                        {district.name_hindi}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Constituency Name (Hindi) <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  required
                  value={constituencyForm.name_hindi}
                  onChange={(e) => setConstituencyForm({ ...constituencyForm, name_hindi: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 hindi-text"
                  placeholder="विधानसभा क्षेत्र का नाम (हिंदी में)"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Constituency Name (English) <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  required
                  value={constituencyForm.name_english}
                  onChange={(e) => setConstituencyForm({ ...constituencyForm, name_english: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Constituency Name (in English)"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Election Phase
                </label>
                <select
                  value={constituencyForm.phase_id}
                  onChange={(e) => setConstituencyForm({ ...constituencyForm, phase_id: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                >
                  <option value="">Not Assigned</option>
                  {phases.map((phase) => (
                    <option key={phase.id || phase.phase_id} value={(phase.id || phase.phase_id)}>
                      Phase {phase.phase_number} - {phase.voting_date ? new Date(phase.voting_date).toLocaleDateString('en-IN') : 'Date TBD'}
                    </option>
                  ))}
                </select>
                <p className="text-xs text-gray-500 mt-1">Assign this constituency to an election phase</p>
              </div>

              <div className="border-t border-gray-200 pt-4">
                <div className="flex items-center mb-3">
                  <input
                    type="checkbox"
                    id="is_reserved"
                    checked={constituencyForm.is_reserved}
                    onChange={(e) => setConstituencyForm({ 
                      ...constituencyForm, 
                      is_reserved: e.target.checked,
                      reservation_type: e.target.checked ? constituencyForm.reservation_type : ''
                    })}
                    className="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded"
                  />
                  <label htmlFor="is_reserved" className="ml-2 block text-sm font-medium text-gray-700">
                    Reserved Constituency
                  </label>
                </div>

                {constituencyForm.is_reserved && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Reservation Type <span className="text-red-500">*</span>
                    </label>
                    <select
                      required={constituencyForm.is_reserved}
                      value={constituencyForm.reservation_type}
                      onChange={(e) => setConstituencyForm({ ...constituencyForm, reservation_type: e.target.value })}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    >
                      <option value="">Select Type</option>
                      <option value="SC">SC (Scheduled Caste)</option>
                      <option value="ST">ST (Scheduled Tribe)</option>
                      <option value="Women">Women</option>
                    </select>
                  </div>
                )}
              </div>

              <div className="flex gap-3 pt-4 border-t border-gray-200">
                <button
                  type="button"
                  onClick={closeConstituencyModal}
                  disabled={actionLoading}
                  className="flex-1 px-6 py-3 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={actionLoading}
                  className="flex-1 bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-3 rounded-lg font-medium hover:from-orange-600 hover:to-orange-700 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
                >
                  {actionLoading ? (
                    <span className="flex items-center justify-center gap-2">
                      <svg className="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Saving...
                    </span>
                  ) : (
                    editingConstituency ? 'Update Constituency' : 'Add Constituency'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}
