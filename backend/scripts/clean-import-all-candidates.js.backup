const db = require('../config/database');
const csvData = require('./clean-candidate-data.js');

console.log('\nЁЯФД Starting CLEAN import of all candidates...\n');
console.log('тЪая╕П  This will DELETE all existing candidates and import fresh data!\n');

// Constituency name mapping for variations
const constituencyNameMap = {
  // Common variations
  'рдЧреМрд░рд╛-рдмреМрд░рд╛рдо': 'рдЧреМрд░рд╛ рдмреМрд░рд╛рдо',
  'рдЧреМрдбрд╝рд╛рдмреМрд░рд╛рдо': 'рдЧреМрд░рд╛ рдмреМрд░рд╛рдо',
  'рд╕реАрд╡рд╛рди': 'рд╕рд┐рд╡рд╛рди',
  'рдмрд┐рд╣рд╛рд░ рд╢рд░реАрдл': 'рдмрд┐рд╣рд╛рд░рд╢рд░реАрдл',
  'рд╡рд╛рд▓реНрдореАрдХрд┐ рдирдЧрд░': 'рд╡рд╛рд▓реНрдореАрдХрд┐рдирдЧрд░',
  'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди': 'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (рдЕрдЬрд╛)',
  'рдХреБрд╢реЗрд╢реНрд╡рд░рд╕реНрдерд╛рди': 'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (рдЕрдЬрд╛)',
  'рдкрд┐рд░рдкреИрдВрддреА': 'рдкреАрд░рдкреИрдВрддреА (рдЕрдЬрд╛)',
  'рдкреАрд░рдкреИрдВрддреА': 'рдкреАрд░рдкреИрдВрддреА (рдЕрдЬрд╛)',
  'рд╡рд░рд╕рд▓реАрдЧрдВрдЬ': 'рд╡рд╛рд░рд┐рд╕рд▓реАрдЧрдВрдЬ',
  'рдЧреЛрдмрд┐рдВрджрдкреБрд░': 'рдЧреЛрдмрд┐рдиреНрджрдкреБрд░',
  'рджреЗрд╣рд░реА': 'рдбреЗрд╣рд░реА',
  'рд╕реБрд▓рддрд╛рдирдЧрдВрдЬ': 'рд╕реБрд▓реНрддрд╛рдирдЧрдВрдЬ',
  'рдмрд╛рдВрдХрд╛': 'рдмрд╛рдБрдХрд╛',
  'рд╡рдЬреАрд░рдЧрдВрдЬ': 'рд╡рдЬрд╝реАрд░рдЧрдВрдЬ',
  'рд░реБрдиреНрдиреАрд╕реИрджрдкреБрд░': 'рд░реВрдиреНрдиреАрд╕реИрджрдкреБрд░',
  'рдореЛрд╣рд┐рдЙрджреНрджреАрди рдирдЧрд░': 'рдореЛрд╣рд┐рдЙрджреНрджреАрдирдирдЧрд░',
  'рдмрд┐рд╣рд╛рд░реАрдЧрдВрдЬ': 'рдмрд┐рд╣рд╛рд░реАрдЧрдВрдЬ',
  
  // SC/ST constituency mappings
  'рд░рд╛рдЬрдирдЧрд░': 'рд░рд╛рдЬрдирдЧрд░ (рдЕрдЬрд╛)',
  'рд╕рд┐рдВрд╣реЗрд╢реНрд╡рд░': 'рд╕рд┐рдВрд╣реЗрд╢реНрд╡рд░ (рдЕрдЬрд╛)',
  'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (SC)': 'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (рдЕрдЬрд╛)',
  'рдХреБрд╢реЗрд╢реНрд╡рд░рд╕реНрдерд╛рди (SC)': 'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (рдЕрдЬрд╛)',
  'рдмрдердирд╛рд╣рд╛-SC': 'рдмрдердирд╛рд╣рд╛ (рдЕрдЬрд╛)',
  'рдмрдердирд╛рд╣рд╛ (SC)': 'рдмрдердирд╛рд╣рд╛ (рдЕрдЬрд╛)',
  'рдордирд┐рд╣рд╛рд░реА': 'рдордирд┐рд╣рд╛рд░реА (рдЕрдиреБрд╕реВрдЪрд┐рдд рдЬрдирдЬрд╛рддрд┐)',
  'рдордирд╣рд╛рд░реА-ST': 'рдордирд┐рд╣рд╛рд░реА (рдЕрдиреБрд╕реВрдЪрд┐рдд рдЬрдирдЬрд╛рддрд┐)',
  'рдордирд┐рд╣рд╛рд░реА (ST)': 'рдордирд┐рд╣рд╛рд░реА (рдЕрдиреБрд╕реВрдЪрд┐рдд рдЬрдирдЬрд╛рддрд┐)',
  'рдХреЛрд░рд╣рд╛-SC': 'рдХреЛрдврд╝рд╛ (рдЕрдЬрд╛)',
  'рд╕реЛрдирдмрд░рд╕рд╛-SC': 'рд╕реЛрдирдмрд░рд╕рд╛ (рдЕрдЬрд╛)',
  'рд╕реЛрдирдмрд░рд╕рд╛ (SC)': 'рд╕реЛрдирдмрд░рд╕рд╛ (рдЕрдЬрд╛)',
  'рд╕рдХрд░рд╛-SC': 'рд╕рдХрд░рд╛ (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрд╛ рдкрд╛рдХрд░-SC': 'рд░рд╛рдЬрд╛ рдкрд╛рдХрд░ (рдЕрдЬрд╛)',
  'рд░реЛрд╕рдбрд╝рд╛-SC': 'рд░реЛрд╕рдбрд╝рд╛ (рдЕрдЬрд╛)',
  'рдмреЛрдЪрд╣рд╛рдВ': 'рдмреЛрдЪрд╣рд╛рдВ (рдЕрдЬрд╛)',
  'рдмреЛрдЪрд╣рд╛рдВ (SC)': 'рдмреЛрдЪрд╣рд╛рдВ (рдЕрдЬрд╛)',
  'рднреЛрд░реЗ': 'рднреЛрд░реЗ (рдЕрдЬрд╛)',
  'рднреЛрд░реЗ (SC)': 'рднреЛрд░реЗ (рдЕрдЬрд╛)',
  'рдкрд╛рддреЗрдкреБрд░': 'рдкрд╛рддреЗрдкреБрд░ (рдЕрдЬрд╛)',
  'рдкрд╛рддреЗрдкреБрд░ (SC)': 'рдкрд╛рддреЗрдкреБрд░ (рдЕрдЬрд╛)',
  'рдкреАрд░рдкреИрдВрддреА (SC)': 'рдкреАрд░рдкреИрдВрддреА (рдЕрдЬрд╛)',
  'рдкрд┐рд░рдкреИрдВрддреА (SC)': 'рдкреАрд░рдкреИрдВрддреА (рдЕрдЬрд╛)',
  'рдлреБрд▓рд╡рд╛рд░реА': 'рдлреБрд▓рд╡рд╛рд░реА (рдЕрдЬрд╛)',
  'рдлреБрд▓рд╡рд╛рд░реА (SC)': 'рдлреБрд▓рд╡рд╛рд░реА (рдЕрдЬрд╛)',
  'рдорд╕реМрдврд╝реА': 'рдорд╕реМрдврд╝реА (рдЕрдЬрд╛)',
  'рдорд╕реМрдврд╝реА (SC)': 'рдорд╕реМрдврд╝реА (рдЕрдЬрд╛)',
  'рдореЛрд╣рдирд┐рдпрд╛': 'рдореЛрд╣рдирд┐рдпрд╛ (рдЕрдЬрд╛)',
  'рдореЛрд╣рдирд┐рдпрд╛ (SC)': 'рдореЛрд╣рдирд┐рдпрд╛ (рдЕрдЬрд╛)',
  'рдЪреЗрдирд╛рд░реА': 'рдЪреЗрдирд╛рд░реА (рдЕрдЬрд╛)',
  'рдЪреЗрдирд╛рд░реА-SC': 'рдЪреЗрдирд╛рд░реА (рдЕрдЬрд╛)',
  'рдЪреЗрдирд╛рд░реА (SC)': 'рдЪреЗрдирд╛рд░реА (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрдкреБрд░-SC': 'рд░рд╛рдЬрдкреБрд░ (рдЕрдЬрд╛)',
  'рдХреБрдЯреБрдВрдмрд╛-SC': 'рдХреБрдЯреБрдВрдмрд╛ (рдЕрдЬрд╛)',
  'рдХреБрдЯреБрдВрдмрд╛ (SC)': 'рдХреБрдЯреБрдВрдмрд╛ (рдЕрдЬрд╛)',
  'рдЗрдорд╛рдордЧрдВрдЬ': 'рдЗрдорд╛рдордЧрдВрдЬ (рдЕрдЬрд╛)',
  'рдЗрдорд╛рдордЧрдВрдЬ (SC)': 'рдЗрдорд╛рдордЧрдВрдЬ (рдЕрдЬрд╛)',
  'рдмрд╛рд░рд╛рдЪрдЯреНрдЯреА': 'рдмрд╛рд░рд╛рдЪрдЯреНрдЯреА (рдЕрдЬрд╛)',
  'рдмрд╛рд░рд╛рдЪрдЯреНрдЯреА (SC)': 'рдмрд╛рд░рд╛рдЪрдЯреНрдЯреА (рдЕрдЬрд╛)',
  'рд╕рд┐рдВрд╣реЗрд╢реНрд╡рд░ (SC)': 'рд╕рд┐рдВрд╣реЗрд╢реНрд╡рд░ (рдЕрдЬрд╛)',
  'рд░рдЬреМрд▓реА': 'рд░рд╛рдЬреМрд▓реА (рдЕрдЬрд╛)',
  'рд░рдЬреМрд▓реА (SC)': 'рд░рд╛рдЬреМрд▓реА (рдЕрдЬрд╛)',
  'рдЖрд▓рд╛рдЙрд▓реА': 'рдЖрд▓реМрд▓реА (рдЕрдЬрд╛)',
  'рдЖрд▓рд╛рдЙрд▓реА (SC)': 'рдЖрд▓реМрд▓реА (рдЕрдЬрд╛)',
  'рдЕрд▓реМрд▓реА': 'рдЖрд▓реМрд▓реА (рдЕрдЬрд╛)',
  'рдЕрд▓реМрд▓реА (SC)': 'рдЖрд▓реМрд▓реА (рдЕрдЬрд╛)',
  'рд╣рд░рд╕рд┐рджреНрдзрд┐': 'рд╣рд░рд╕рд┐рджреНрдзрд┐ (рдЕрдЬрд╛)',
  'рд╣рд░рд╕рд┐рджреНрдзрд┐ (SC)': 'рд╣рд░рд╕рд┐рджреНрдзрд┐ (рдЕрдЬрд╛)',
  'рджрд╛рдирд╛рдкреБрд░': 'рджрд╛рдирд╛рдкреБрд░',
  'рд╕рд┐рдХрдВрджрд░рд╛': 'рд╕рд┐рдХрдиреНрджрд░рд╛ (рдЕрдЬрд╛)',
  'рд╕рд┐рдХрдВрджрд░рд╛ (SC)': 'рд╕рд┐рдХрдиреНрджрд░рд╛ (рдЕрдЬрд╛)',
  'рдзреЛрд░реИрдпрд╛': 'рдзреЛрд░реИрдпрд╛ (рдЕрдЬрд╛)',
  'рдзреЛрд░реИрдпрд╛ (SC)': 'рдзреЛрд░реИрдпрд╛ (рдЕрдЬрд╛)',
  'рдХрдЯреЛрд░рд┐рдпрд╛ (ST)': 'рдХрдЯреЛрд░рд┐рдпрд╛ (рдЕрдиреБрд╕реВрдЪрд┐рдд рдЬрдирдЬрд╛рддрд┐)',
  'рдордЦрджреБрдордкреБрд░': 'рдордЦрджреБрдордкреБрд░ (рдЕрдЬрд╛)',
  'рдордЦрджреБрдордкреБрд░ (SC)': 'рдордЦрджреБрдордкреБрд░ (рдЕрдЬрд╛)',
  'рдмреЛрдз рдЧрдпрд╛': 'рдмреЛрдз рдЧрдпрд╛ (рдЕрдЬрд╛)',
  'рдмреЛрдз рдЧрдпрд╛ (SC)': 'рдмреЛрдз рдЧрдпрд╛ (рдЕрдЬрд╛)',
  'рдмреЛрдзрдЧрдпрд╛': 'рдмреЛрдз рдЧрдпрд╛ (рдЕрдЬрд╛)',
  'рдмреЛрдзрдЧрдпрд╛ (SC)': 'рдмреЛрдз рдЧрдпрд╛ (рдЕрдЬрд╛)',
  'рдХрд▓реНрдпрд╛рдгрдкреБрд░': 'рдХрд▓реНрдпрд╛рдгрдкреБрд░ (рдЕрдЬрд╛)',
  'рдХрд▓реНрдпрд╛рдгрдкреБрд░ (SC)': 'рдХрд▓реНрдпрд╛рдгрдкреБрд░ (рдЕрдЬрд╛)',
  'рджрд░реМрд▓реА': 'рджрд░реМрд▓реА (рдЕрдЬрд╛)',
  'рджрд░реМрд▓реА (SC)': 'рджрд░реМрд▓реА (рдЕрдЬрд╛)',
  'рдЧрд░рдЦрд╛': 'рдЧрд░рдЦрд╛ (рдЕрдЬрд╛)',
  'рдЧрд░рдЦрд╛ (SC)': 'рдЧрд░рдЦрд╛ (рдЕрдЬрд╛)',
  'рдмрдЦрд░реА': 'рдмрдЦрд░реА (рдЕрдЬрд╛)',
  'рдмрдЦрд░реА (SC)': 'рдмрдЦрд░реА (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрдЧреАрд░': 'рд░рд╛рдЬрдЧреАрд░ (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрдЧреАрд░ (SC)': 'рд░рд╛рдЬрдЧреАрд░ (рдЕрдЬрд╛)',
  'рдЕрдЧрд┐рдЖрдВрд╡': 'рдЕрдЧрд┐рдЖрдВрд╡ (рдЕрдЬрд╛)',
  'рдЕрдЧрд┐рдЖрдВрд╡ (SC)': 'рдЕрдЧрд┐рдЖрдВрд╡ (рдЕрдЬрд╛)',
  'рддреНрд░рд┐рдмреЗрдиреАрдЧрдВрдЬ': 'рддреНрд░рд┐рд╡реЗрдгреАрдЧрдВрдЬ (рдЕрдЬрд╛)',
  'рддреНрд░рд┐рдмреЗрдиреАрдЧрдВрдЬ (SC)': 'рддреНрд░рд┐рд╡реЗрдгреАрдЧрдВрдЬ (рдЕрдЬрд╛)',
  'рд░рд╛рдиреАрдЧрдВрдЬ': 'рд░рд╛рдиреАрдЧрдВрдЬ (рдЕрдЬрд╛)',
  'рд░рд╛рдиреАрдЧрдВрдЬ (SC)': 'рд░рд╛рдиреАрдЧрдВрдЬ (рдЕрдЬрд╛)',
  'рдмрдирдордирдЦреА': 'рдмрдирдордирдЦреА (рдЕрдЬрд╛)',
  'рдмрдирдордирдЦреА (SC)': 'рдмрдирдордирдЦреА (рдЕрдЬрд╛)',
  'рдмрдЦрд░реА (рдЕрдиреБ.рдЬрд╛рддрд┐)': 'рдмрдЦрд░реА (рдЕрдЬрд╛)',
  'рд░рдЬреМрд▓реА (рдЕрдиреБ.рдЬрд╛рддрд┐)': 'рд░рд╛рдЬреМрд▓реА (рдЕрдЬрд╛)',
  'рдмреЛрдзрдЧрдпрд╛ (рдЕрдиреБ.рдЬрд╛рддрд┐)': 'рдмреЛрдз рдЧрдпрд╛ (рдЕрдЬрд╛)',
  'рдЪреЗрдирд╛рд░реА (рдЕрдиреБ.рдЬрд╛рддрд┐)': 'рдЪреЗрдирд╛рд░реА (рдЕрдЬрд╛)',
  'рдЗрдорд╛рдордЧрдВрдЬ (рдЕ.рдЬрд╛.)': 'рдЗрдорд╛рдордЧрдВрдЬ (рдЕрдЬрд╛)',
  'рдмрд╛рд░рд╛рдЪрдЯреНрдЯреА (рдЕ.рдЬрд╛.)': 'рдмрд╛рд░рд╛рдЪрдЯреНрдЯреА (рдЕрдЬрд╛)',
  'рд╕рд┐рдХрдВрджрд░рд╛ (рдЕ.рдЬрд╛.)': 'рд╕рд┐рдХрдиреНрджрд░рд╛ (рдЕрдЬрд╛)',
  'рдХреБрдЯреБрдВрдмрд╛ (рдЕ.рдЬрд╛.)': 'рдХреБрдЯреБрдВрдмрд╛ (рдЕрдЬрд╛)',
  'рдкреАрд░рдкреИрдВрддреА (рдЕ.рдЬрд╛.)': 'рдкреАрд░рдкреИрдВрддреА (рдЕрдЬрд╛)',
  'рдХреБрд╢реЗрд╢реНрд╡рд░рд╕реНрдерд╛рди (рдЕ.рдЬрд╛.)': 'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (рдЕрдЬрд╛)',
  'рднреЛрд░реЗ (рдЕ.рдЬрд╛.)': 'рднреЛрд░реЗ (рдЕрдЬрд╛)',
  'рдмрдердирд╛рд╣рд╛ (рдЕ.рдЬрд╛.)': 'рдмрдердирд╛рд╣рд╛ (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрдирдЧрд░ (рдЕ.рдЬрд╛.)': 'рд░рд╛рдЬрдирдЧрд░ (рдЕрдЬрд╛)',
  'рд╕рд┐рдВрд╣реЗрд╢реНрд╡рд░ рдЕ0рдЬрд╛0': 'рд╕рд┐рдВрд╣реЗрд╢реНрд╡рд░ (рдЕрдЬрд╛)',
  'рд╕реЛрдирдмрд░рд╕рд╛ (рдЕ.рдЬрд╛.)': 'рд╕реЛрдирдмрд░рд╕рд╛ (рдЕрдЬрд╛)',
  'рдХреБрд╢реЗрд╢реНрд╡рд░рд╕реНрдерд╛рди (рдЕ.рдЬрд╛.)': 'рдХреБрд╢реЗрд╢реНрд╡рд░ рд╕реНрдерд╛рди (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрд╛рдкрд╛рдХрд░': 'рд░рд╛рдЬрд╛ рдкрд╛рдХрд░ (рдЕрдЬрд╛)',
  'рд░рд╛рдЬрд╛рдкрд╛рдХрд░ (рдЕ.рдЬрд╛.)': 'рд░рд╛рдЬрд╛ рдкрд╛рдХрд░ (рдЕрдЬрд╛)',
  'рдХрд▓реНрдпрд╛рдгрдкреБрд░ (рдЕ.рдЬрд╛.)': 'рдХрд▓реНрдпрд╛рдгрдкреБрд░ (рдЕрдЬрд╛)',
  'рдЖрд▓реМрд▓реА (рдЕ.рдЬрд╛.)': 'рдЖрд▓реМрд▓реА (рдЕрдЬрд╛)',
  'рдкрд╛рддреЗрдкреБрд░ (рдЕ.рдЬрд╛.)': 'рдкрд╛рддреЗрдкреБрд░ (рдЕрдЬрд╛)',
  'рд╕рдХрд░рд╛ (рдЖ0рдЬрд╛0)': 'рд╕рдХрд░рд╛ (рдЕрдЬрд╛)',
  'рдХреЛрдврд╝рд╛ (рдЕ.рдЬрд╛.)': 'рдХреЛрдврд╝рд╛ (рдЕрдЬрд╛)',
  'рдХрдЯреЛрд░рд┐рдпрд╛ (рдЕрдЬрдЬрд╛)': 'рдХрдЯреЛрд░рд┐рдпрд╛ (рдЕрдиреБрд╕реВрдЪрд┐рдд рдЬрдирдЬрд╛рддрд┐)',
  'рдордирд┐рд╣рд╛рд░реА (рдЕ.рдЬ.рдЬрд╛.)': 'рдордирд┐рд╣рд╛рд░реА (рдЕрдиреБрд╕реВрдЪрд┐рдд рдЬрдирдЬрд╛рддрд┐)',
  'рдзреЛрд░реИрдпрд╛ (рдЕ.рдЬрд╛.)': 'рдзреЛрд░реИрдпрд╛ (рдЕрдЬрд╛)',
  'рддреНрд░рд┐рд╡реЗрдгреАрдЧрдВрдЬ (рдЕ.рдЬрд╛.)': 'рддреНрд░рд┐рд╡реЗрдгреАрдЧрдВрдЬ (рдЕрдЬрд╛)',
  'рд░рд╛рдиреАрдЧрдВрдЬ (рдЕ.рдЬрд╛.)': 'рд░рд╛рдиреАрдЧрдВрдЬ (рдЕрдЬрд╛)',
  'рдмрд╛рдБрдХрд╛': 'рдмрд╛рдБрдХрд╛',
  'рдмрд╛рдВрдХреАрдкреБрд░': 'рдмрд╛рдБрдХреАрдкреБрд░'
};

// Party code mapping
const partyCodeMap = {
  'BJP': 'BJP',
  'JDU': 'JDU',
  'JAN_SURAJ': 'JAN_SURAJ',
  'LJPRV': 'LJPRV',
  'HAMS': 'HAMS',
  'RLM': 'RLM',
  'AAP': 'AAP',
  'AIMIM': 'AIMIM',
  'CPIM': 'CPIM',
  'CPIML': 'CPIML',
  'JJD': 'JJD',
  'VIP': 'VIP',
  'INC': 'INC',
  'RJD': 'RJD'
};

async function deleteAllCandidates() {
  console.log('ЁЯЧСя╕П  Deleting all existing candidates...');
  const [result] = await db.query('DELETE FROM Candidates');
  console.log(`   тЬЕ Deleted ${result.affectedRows} candidates\n`);
  return result.affectedRows;
}

async function getPartyId(partyCode) {
  const mappedCode = partyCodeMap[partyCode] || partyCode;
  const [rows] = await db.query(
    'SELECT id FROM Parties WHERE short_code = ?',
    [mappedCode]
  );
  if (rows.length === 0) {
    throw new Error(`тЭМ Party not found: ${partyCode} (mapped to ${mappedCode})`);
  }
  return rows[0].id;
}

async function getConstituencyId(constituencyName) {
  // Try direct match first
  let [rows] = await db.query(
    'SELECT id FROM Constituencies WHERE name_hindi = ?',
    [constituencyName]
  );
  
  if (rows.length > 0) {
    return rows[0].id;
  }
  
  // Try mapped name
  const mappedName = constituencyNameMap[constituencyName];
  if (mappedName) {
    [rows] = await db.query(
      'SELECT id FROM Constituencies WHERE name_hindi = ?',
      [mappedName]
    );
    if (rows.length > 0) {
      return rows[0].id;
    }
  }
  
  return null;
}

async function importCandidates() {
  let totalImported = 0;
  let totalSkipped = 0;
  const skippedDetails = [];
  
  console.log('ЁЯУе Importing candidates from all parties...\n');
  
  for (const [party, candidates] of Object.entries(csvData)) {
    console.log(`ЁЯУж Processing ${party} (${candidates.length} candidates)...`);
    
    try {
      const partyId = await getPartyId(party);
      let imported = 0;
      let skipped = 0;
      
      for (const [constituency, candidateName] of candidates) {
        const constituencyId = await getConstituencyId(constituency);
        
        if (!constituencyId) {
          skipped++;
          skippedDetails.push({
            party,
            constituency,
            candidate: candidateName
          });
          continue;
        }
        
        await db.query(
          'INSERT INTO Candidates (name_hindi, party_id, constituency_id) VALUES (?, ?, ?)',
          [candidateName, partyId, constituencyId]
        );
        imported++;
      }
      
      console.log(`   тЬЕ Imported: ${imported}, тПня╕П  Skipped: ${skipped}`);
      totalImported += imported;
      totalSkipped += skipped;
      
    } catch (error) {
      console.error(`   тЭМ Error importing ${party}:`, error.message);
    }
  }
  
  console.log(`\n\n${'='.repeat(60)}`);
  console.log(`ЁЯУК IMPORT SUMMARY:`);
  console.log(`${'='.repeat(60)}`);
  console.log(`   тЬЕ Total Imported: ${totalImported}`);
  console.log(`   тПня╕П  Total Skipped: ${totalSkipped}`);
  console.log(`${'='.repeat(60)}\n`);
  
  if (skippedDetails.length > 0) {
    console.log(`тЪая╕П  Skipped Candidates (constituency not found):`);
    skippedDetails.forEach(({ party, constituency, candidate }) => {
      console.log(`   ${party}: ${constituency} - ${candidate}`);
    });
    console.log('');
  }
  
  return { totalImported, totalSkipped };
}

async function verifyImport() {
  console.log('ЁЯФН Verifying import...\n');
  
  // Get counts by party
  const [counts] = await db.query(`
    SELECT 
      p.short_code,
      p.name_hindi,
      COUNT(c.id) as count
    FROM Parties p
    LEFT JOIN Candidates c ON p.id = c.party_id
    WHERE p.short_code IN ('BJP', 'JDU', 'JAN_SURAJ', 'LJPRV', 'HAMS', 'RLM', 'AAP', 'AIMIM', 'CPIM', 'CPIML', 'JJD', 'VIP', 'INC', 'RJD')
    GROUP BY p.id
    ORDER BY p.short_code
  `);
  
  console.log('ЁЯУК Candidate Counts by Party:');
  console.log('тФА'.repeat(60));
  let grandTotal = 0;
  counts.forEach(row => {
    console.log(`   ${row.short_code.padEnd(12)} : ${row.count} candidates`);
    grandTotal += row.count;
  });
  console.log('тФА'.repeat(60));
  console.log(`   ${'TOTAL'.padEnd(12)} : ${grandTotal} candidates`);
  console.log('тХР'.repeat(60));
  
  // Show sample candidates
  const [samples] = await db.query(`
    SELECT 
      c.name_hindi,
      p.short_code,
      con.name_hindi as constituency
    FROM Candidates c
    JOIN Parties p ON c.party_id = p.id
    JOIN Constituencies con ON c.constituency_id = con.id
    ORDER BY RAND()
    LIMIT 5
  `);
  
  console.log('\nЁЯУЛ Sample Candidates:');
  samples.forEach(row => {
    console.log(`   ${row.short_code} - ${row.name_hindi} (${row.constituency})`);
  });
  console.log('');
}

async function main() {
  try {
    console.log('тХР'.repeat(60));
    console.log('  CLEAN IMPORT OF ALL CANDIDATES');
    console.log('тХР'.repeat(60));
    console.log(`  Total candidates to import: ${Object.values(csvData).flat().length}`);
    console.log('тХР'.repeat(60));
    console.log('');
    
    // Step 1: Delete all existing candidates
    await deleteAllCandidates();
    
    // Step 2: Import fresh data
    const { totalImported, totalSkipped } = await importCandidates();
    
    // Step 3: Verify
    await verifyImport();
    
    console.log('тЬЕ Import completed successfully!\n');
    
  } catch (error) {
    console.error('тЭМ Error:', error);
    process.exit(1);
  } finally {
    await db.end();
  }
}

main();
